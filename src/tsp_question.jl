# El Gran Tour del Inspector de Tacos Nacionales
# TSP para visitar todas las capitales de los estados mexicanos
# con visualizaci칩n utilizando GMT.jl (Generic Mapping Tools)
using Dates
using JuMP
using Gurobi  # Cambiar por HiGHS si no se tiene licencia de Gurobi
using LinearAlgebra
using Statistics
using GMT  # Generic Mapping Tools para visualizaci칩n geogr치fica

# 1. LEER DATOS DE ARCHIVO: Capitales de los estados mexicanos
function read_capitals_from_file(filename)
    return capitales
end

# 2. CALCULAR LA MATRIZ DE DISTANCIAS
# Usaremos la distancia haversine para considerar la curvatura terrestre
function haversine(lat1, lon1, lat2, lon2)
    return R * c
end

function calculate_distance_matrix(latitudes, longitudes)
    return dist_matrix
end

# 3. RESOLVER EL TSP CON FORMULACI칍N MTZ
function solve_tsp_capitals(dist_matrix, nombres, start_city_name="Monterrey")


    model = direct_model(Gurobi.Optimizer())
    optimize!(model)

    # Extraer soluci칩n
    if termination_status(model) == MOI.OPTIMAL ||
       (termination_status(model) == MOI.TIME_LIMIT && has_values(model))

        # Extraer el tour
        tour = extract_tour(value.(x), n, start_city)
        total_distance = objective_value(model)
        gap = relative_gap(model)

        return tour, total_distance, gap, solve_time(model)
    else
        println("No se encontr칩 soluci칩n. Estado: ", termination_status(model))
        return [], Inf, NaN, 0.0
    end
end

# Funci칩n para extraer el tour de la matriz x
function extract_tour(x_val, n, start_city)
    tour = [start_city]  # Comenzamos en la ciudad inicial
    current = start_city

    while length(tour) < n
        for j in 1:n
            if j != current && x_val[current, j] > 0.5
                push!(tour, j)
                current = j
                break
            end
        end
    end

    return tour
end

# 4. VISUALIZAR LA SOLUCI칍N CON GMT
# Funci칩n de visualizaci칩n actualizada
function plot_mexico_tsp_with_gmt(tour, nombres, latitudes, longitudes, dist_matrix)
    return true
end

# 5. GENERAR UN ITINERARIO HUMOR칈STICO
function print_taco_tour_itinerary(tour, nombres, dist_matrix)
    println("\n游꺑 EL GRAN TOUR DEL INSPECTOR DE TACOS NACIONALES 游꺑")
    println("----------------------------------------------------")
    println("MISI칍N: Verificar la autenticidad de los tacos en cada capital estatal")

    total_distance = 0.0
    prev_city = tour[1]

    println("\nITINERARIO:")
    println("D칤a 1: Inicio en $(nombres[tour[1]]) - 춰Aqu칤 comienza nuestra gran aventura taquera!")

    for i in 2:length(tour)
        current_city = tour[i]
        distance = dist_matrix[prev_city, current_city]
        total_distance += distance

        taco_types = ["al pastor", "de carnitas", "de barbacoa", "de suadero", "de birria",
            "de pescado", "de camar칩n", "de chicharr칩n", "de lengua", "de cabeza",
            "de tripa", "campechanos", "de chorizo", "de asada", "vegetarianos"]

        taco_joke = rand([
            "춰El guacamole aqu칤 debe ser investigado por ser ilegalmente delicioso!",
            "Se rumora que aqu칤 las salsas requieren firma de responsabilidad.",
            "Tendr칠 que probar al menos 17 tacos para una evaluaci칩n completa.",
            "Dicen que el cilantro local tiene propiedades m치gicas.",
            "La tortilla ser치 analizada por su perfecta circunferencia.",
            "Necesitar칠 verificar si la cebolla est치 debidamente caramelizada.",
            "Investigaci칩n especial sobre la proporci칩n 칩ptima salsa-taco.",
            "Hay reportes de que la salsa hace cantar el himno nacional.",
            "La limosidad del lim칩n ser치 evaluada con criterios estrictos.",
            "La temperatura de la tortilla debe ser certificada por el instituto."
        ])

        println("D칤a $i: Viaje a $(nombres[current_city]) ($(round(distance, digits=2)) km)")
        println("   游꺑 Inspecci칩n de tacos $(taco_types[i % length(taco_types) + 1])")
        println("   游닇 Nota: $taco_joke")

        prev_city = current_city
    end

    # Volver al inicio
    distance_back = dist_matrix[tour[end], tour[1]]
    total_distance += distance_back

    println("D칤a $(length(tour)+1): Regreso a $(nombres[tour[1]]) ($(round(distance_back, digits=2)) km)")
    println("   游끠 Fin del tour con un gran taco de victory lap")

    println("\nDISTANCIA TOTAL RECORRIDA: $(round(total_distance, digits=2)) kil칩metros")
    println("TACOS PROBADOS: Aproximadamente $(length(tour) * 7) (m칤nimo 7 por capital)")
    println("BOTELLAS DE SALSA EVALUADAS: $(length(tour) * 3)")
    println("LIMONES EXPRIMIDOS: $(length(tour) * 12)")
    println("\nCONCLUSI칍N: M칠xico sigue siendo la superpotencia mundial de tacos.")

    return total_distance
end

# 6. GUARDAR RESULTADOS A UN ARCHIVO
function save_tour_to_file(tour, nombres, dist_matrix, distance, solution_time, gap, filename="resultados_tour_tacos.txt")
    open(filename, "w") do file
        write(file, "游꺑 EL GRAN TOUR DEL INSPECTOR DE TACOS NACIONALES 游꺑\n")
        write(file, "====================================================\n\n")

        # Informaci칩n del an치lisis
        write(file, "INFORMACI칍N DEL AN츼LISIS\n")
        write(file, "----------------------\n")
        write(file, "Fecha: $(Dates.format(Dates.now(), "dd-mm-yyyy HH:MM:SS"))\n")
        write(file, "Tiempo de c치lculo: $(round(solution_time, digits=2)) segundos\n")
        write(file, "Gap relativo: $(round(100*gap, digits=2))%\n\n")

        # Informaci칩n del tour
        write(file, "RUTA 칍PTIMA\n")
        write(file, "----------\n")
        write(file, "Punto de inicio: $(nombres[tour[1]])\n")
        write(file, "Distancia total: $(round(distance, digits=2)) km\n")
        write(file, "N칰mero de ciudades: $(length(tour))\n\n")

        # Secuencia detallada del tour
        write(file, "SECUENCIA DEL TOUR\n")
        write(file, "----------------\n")

        for i in 1:length(tour)
            if i < length(tour)
                leg_distance = dist_matrix[tour[i], tour[i+1]]
                write(file, "$(i). $(nombres[tour[i]]) -> $(nombres[tour[i+1]]) ($(round(leg_distance, digits=2)) km)\n")
            else
                # 칔ltimo tramo cerrando el circuito
                leg_distance = dist_matrix[tour[i], tour[1]]
                write(file, "$(i). $(nombres[tour[i]]) -> $(nombres[tour[1]]) ($(round(leg_distance, digits=2)) km)\n")
            end
        end

        # Estad칤sticas adicionales
        write(file, "\nESTAD칈STICAS DEL TOUR\n")
        write(file, "-------------------\n")
        write(file, "Distancia promedio entre ciudades: $(round(distance / length(tour), digits=2)) km\n")

        # Distancia m칤nima y m치xima entre ciudades consecutivas
        distances_between_stops = Float64[]
        for i in 1:length(tour)
            next_idx = i % length(tour) + 1
            push!(distances_between_stops, dist_matrix[tour[i], tour[next_idx]])
        end

        write(file, "Tramo m치s corto: $(round(minimum(distances_between_stops), digits=2)) km\n")
        write(file, "Tramo m치s largo: $(round(maximum(distances_between_stops), digits=2)) km\n")

        # Comentario final
        write(file, "\n춰Viva M칠xico y sus tacos! 游꺑\n")
    end

    println("Resultados guardados en el archivo: $filename")
    return true
end

# 7. FUNCI칍N PRINCIPAL QUE INTEGRA TODO EL PROCESO
function run_taco_inspector_analysis(capitals_file="capitales_mexico.txt",
    start_city="Monterrey",
    output_results="resultados_tour_tacos.txt")
    println("游꺑 Iniciando el c치lculo de la ruta 칩ptima para el Inspector de Tacos Nacionales...")

    # 1. Cargar datos
    capitales = read_capitals_from_file(capitals_file)

    # Extraer componentes
    nombres = [c[1] for c in capitales]
    latitudes = [c[2] for c in capitales]
    longitudes = [c[3] for c in capitales]
    n = length(capitales)

    # 2. Calcular matriz de distancias
    dist_matrix = calculate_distance_matrix(latitudes, longitudes)

    # Imprimir algunas estad칤sticas de las distancias
    println("Estad칤sticas de las distancias (km):")
    println("  M칤nima: ", round(minimum(filter(x -> x < 1e6, dist_matrix)), digits=2))
    println("  M치xima: ", round(maximum(filter(x -> x < 1e6, dist_matrix)), digits=2))
    println("  Promedio: ", round(mean(filter(x -> x < 1e6, dist_matrix)), digits=2))

    # 3. Resolver el TSP
    tour, distance, gap, solution_time = solve_tsp_capitals(dist_matrix, nombres, start_city)

    if isempty(tour)
        println("No se pudo encontrar una soluci칩n. Abortando.")
        return nothing, nothing
    end

    println("\nSOLUCI칍N ENCONTRADA:")
    println("Tiempo de c치lculo: $(round(solution_time, digits=2)) segundos")
    println("Distancia total: $(round(distance, digits=2)) km")
    println("Gap relativo: $(round(100*gap, digits=2))%")

    # Imprimir ruta
    println("\nRUTA 칍PTIMA:")
    for i in eachindex(tour)
        println("$(i). $(nombres[tour[i]])")
    end

    # 4. Generar y mostrar el itinerario humor칤stico
    total_distance = print_taco_tour_itinerary(tour, nombres, dist_matrix)

    # 5. Visualizar la soluci칩n con GMT
    plot_mexico_tsp_with_gmt(tour, nombres, latitudes, longitudes, dist_matrix)

    # 6. Guardar resultados a un archivo
    save_tour_to_file(tour, nombres, dist_matrix, distance, solution_time, gap, output_results)

    println("\n춰La ruta 칩ptima del Inspector de Tacos Nacionales ha sido calculada con 칠xito! 游꺑")

    return tour, distance
end

# Funci칩n principal para ejecutar todo el programa
function main()
    # Definir par치metros (podr칤an provenir de argumentos de l칤nea de comandos)
    capitals_file = "capitales_mexico.txt"
    start_city = "Monterrey"
    output_results = "resultados_tour_tacos.txt"

    # Ejecutar el an치lisis completo
    tour, distance = run_taco_inspector_analysis(
        capitals_file,
        start_city,
        output_results
    )

    return tour, distance
end

# Patr칩n est치ndar de Julia para ejecutar el main solo cuando se ejecuta el script directamente
if abspath(PROGRAM_FILE) == @__FILE__
    main()
end
